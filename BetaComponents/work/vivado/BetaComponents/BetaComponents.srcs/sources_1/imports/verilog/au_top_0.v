/*
   This file was generated automatically by Alchitry Labs version 1.2.0.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [32-1:0] M_beta_ia;
  wire [32-1:0] M_beta_mem_data_address;
  wire [32-1:0] M_beta_mem_data_output;
  wire [1-1:0] M_beta_xwr;
  reg [1-1:0] M_beta_slowclk;
  reg [1-1:0] M_beta_rst;
  reg [1-1:0] M_beta_interrupt;
  reg [32-1:0] M_beta_instruction;
  reg [32-1:0] M_beta_mem_data_input;
  beta_cpu_1 beta (
    .clk(clk),
    .slowclk(M_beta_slowclk),
    .rst(M_beta_rst),
    .interrupt(M_beta_interrupt),
    .instruction(M_beta_instruction),
    .mem_data_input(M_beta_mem_data_input),
    .ia(M_beta_ia),
    .mem_data_address(M_beta_mem_data_address),
    .mem_data_output(M_beta_mem_data_output),
    .xwr(M_beta_xwr)
  );
  
  wire [1-1:0] M_slowclock_value;
  counter_2 slowclock (
    .clk(clk),
    .rst(rst),
    .value(M_slowclock_value)
  );
  
  wire [1-1:0] M_slowclockedge_out;
  reg [1-1:0] M_slowclockedge_in;
  edge_detector_3 slowclockedge (
    .clk(clk),
    .in(M_slowclockedge_in),
    .out(M_slowclockedge_out)
  );
  
  localparam SAMPLE_CODE = 160'h7be3fffb607f0020643f002090410800c03f0007;
  
  wire [32-1:0] M_memory_unit_read_data;
  reg [4-1:0] M_memory_unit_waddr;
  reg [32-1:0] M_memory_unit_write_data;
  reg [1-1:0] M_memory_unit_write_en;
  reg [4-1:0] M_memory_unit_raddr;
  simple_dual_ram_4 #(.SIZE(6'h20), .DEPTH(5'h10)) memory_unit (
    .wclk(clk),
    .rclk(clk),
    .waddr(M_memory_unit_waddr),
    .write_data(M_memory_unit_write_data),
    .write_en(M_memory_unit_write_en),
    .raddr(M_memory_unit_raddr),
    .read_data(M_memory_unit_read_data)
  );
  
  reg [2:0] M_writer_counter_d, M_writer_counter_q = 1'h0;
  
  
  localparam WRITE_code_writer = 1'd0;
  localparam GO_code_writer = 1'd1;
  
  reg M_code_writer_d, M_code_writer_q = WRITE_code_writer;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_5 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_3 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_6 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  wire [16-1:0] M_dec_ctr_digits;
  reg [1-1:0] M_dec_ctr_inc;
  multi_dec_ctr_7 dec_ctr (
    .clk(clk),
    .rst(rst),
    .inc(M_dec_ctr_inc),
    .digits(M_dec_ctr_digits)
  );
  wire [1-1:0] M_ctr_value;
  counter_8 ctr (
    .clk(clk),
    .rst(rst),
    .value(M_ctr_value)
  );
  
  always @* begin
    M_code_writer_d = M_code_writer_q;
    M_writer_counter_d = M_writer_counter_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = {3'h0, io_button};
    usb_tx = usb_rx;
    M_edge_detector_in = M_ctr_value;
    M_dec_ctr_inc = M_edge_detector_out;
    M_seg_values = M_dec_ctr_digits;
    io_led = 24'h000000;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    M_slowclockedge_in = M_slowclock_value;
    M_beta_interrupt = 1'h0;
    M_beta_slowclk = M_slowclockedge_out;
    M_beta_mem_data_input = 32'h00000000;
    M_beta_instruction = 32'h00000000;
    M_beta_rst = 1'h0;
    io_led[8+7-:8] = M_beta_mem_data_address[2+5-:6];
    io_led[16+7-:8] = M_beta_mem_data_output[0+7-:8];
    io_led[0+7-:8] = M_beta_ia[0+7-:8];
    M_beta_instruction = M_memory_unit_read_data;
    led = M_memory_unit_read_data[24+7-:8];
    M_memory_unit_write_data = M_beta_mem_data_output;
    M_memory_unit_write_en = M_beta_xwr;
    M_memory_unit_waddr = M_beta_mem_data_address[2+3-:4];
    M_memory_unit_raddr = M_beta_ia[2+1-:2];
    
    case (M_code_writer_q)
      WRITE_code_writer: begin
        M_beta_rst = 1'h1;
        M_writer_counter_d = M_writer_counter_q + 1'h1;
        M_memory_unit_write_data = SAMPLE_CODE[(M_writer_counter_q)*32+31-:32];
        M_memory_unit_write_en = 1'h1;
        M_memory_unit_waddr = M_writer_counter_q;
        if (M_writer_counter_q == 3'h4) begin
          M_code_writer_d = GO_code_writer;
        end
      end
      GO_code_writer: begin
        M_code_writer_d = GO_code_writer;
      end
    endcase
  end
  
  always @(posedge clk) begin
    M_writer_counter_q <= M_writer_counter_d;
  end
  
  
  always @(posedge clk) begin
    M_code_writer_q <= M_code_writer_d;
  end
  
endmodule
