/*
   This file was generated automatically by Alchitry Labs version 1.1.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_btn_out;
  reg [1-1:0] M_btn_in;
  button_conditioner_2 btn (
    .clk(clk),
    .in(M_btn_in),
    .out(M_btn_out)
  );
  wire [1-1:0] M_edge_out;
  reg [1-1:0] M_edge_in;
  edge_detector_3 L_edge (
    .clk(clk),
    .in(M_edge_in),
    .out(M_edge_out)
  );
  reg M_pressed_d, M_pressed_q = 1'h0;
  wire [1-1:0] M_sclk_value;
  counter_4 sclk (
    .clk(clk),
    .rst(rst),
    .value(M_sclk_value)
  );
  
  localparam S0_nn1 = 2'd0;
  localparam S1_nn1 = 2'd1;
  localparam S2_nn1 = 2'd2;
  localparam S3_nn1 = 2'd3;
  
  reg [1:0] M_nn1_d, M_nn1_q = S0_nn1;
  wire [8-1:0] M_multiply_debug;
  wire [8-1:0] M_multiply_debug1;
  wire [8-1:0] M_multiply_out;
  reg [1-1:0] M_multiply_ale;
  reg [1-1:0] M_multiply_ble;
  reg [1-1:0] M_multiply_asel;
  reg [1-1:0] M_multiply_bsel;
  reg [8-1:0] M_multiply_n;
  multnn1_5 multiply (
    .clk(M_sclk_value),
    .rst(rst),
    .ale(M_multiply_ale),
    .ble(M_multiply_ble),
    .asel(M_multiply_asel),
    .bsel(M_multiply_bsel),
    .n(M_multiply_n),
    .debug(M_multiply_debug),
    .debug1(M_multiply_debug1),
    .out(M_multiply_out)
  );
  
  always @* begin
    M_nn1_d = M_nn1_q;
    M_pressed_d = M_pressed_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_btn_in = io_button[0+0-:1];
    M_edge_in = M_btn_out;
    if (M_edge_out == 1'h1 && M_pressed_q == 1'h0) begin
      M_pressed_d = M_edge_out;
    end
    led[7+0-:1] = M_pressed_q;
    M_multiply_n = io_dip[0+7-:8];
    M_multiply_asel = 1'h0;
    M_multiply_ale = 1'h0;
    M_multiply_bsel = 1'h0;
    M_multiply_ble = 1'h0;
    io_led[0+7-:8] = io_dip[0+7-:8];
    io_led[16+7-:8] = M_multiply_out;
    led[0+4-:5] = io_button;
    
    case (M_nn1_q)
      S0_nn1: begin
        if (M_pressed_q == 1'h1) begin
          M_pressed_d = 1'h0;
        end
        io_led[8+7-:8] = 8'h01;
        M_nn1_d = S1_nn1;
        M_multiply_asel = 1'h1;
        M_multiply_ale = 1'h1;
        M_multiply_bsel = 1'h0;
        M_multiply_ble = 1'h1;
      end
      S1_nn1: begin
        io_led[8+7-:8] = 8'h03;
        M_nn1_d = S2_nn1;
        M_multiply_asel = 1'h0;
        M_multiply_ale = 1'h1;
        M_multiply_bsel = 1'h1;
        M_multiply_ble = 1'h1;
      end
      S2_nn1: begin
        io_led[8+7-:8] = 8'h07;
        M_nn1_d = S3_nn1;
        M_multiply_asel = 1'h0;
        M_multiply_ale = 1'h1;
        M_multiply_bsel = 1'h1;
        M_multiply_ble = 1'h1;
      end
      S3_nn1: begin
        io_led[8+7-:8] = 8'h0f;
        M_nn1_d = S3_nn1;
        M_multiply_asel = 1'h0;
        M_multiply_ale = 1'h0;
        M_multiply_bsel = 1'h0;
        M_multiply_ble = 1'h0;
        if (M_pressed_q == 1'h1) begin
          M_nn1_d = S0_nn1;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    M_pressed_q <= M_pressed_d;
  end
  
  
  always @(posedge M_sclk_value) begin
    if (rst == 1'b1) begin
      M_nn1_q <= 1'h0;
    end else begin
      M_nn1_q <= M_nn1_d;
    end
  end
  
endmodule
