module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
    
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner btn;
    edge_detector btn_pressed_detector;
    dff btn_pressed_dff;
     
    .rst(rst){
      
      counter sclk(#SIZE(1),#DIV(24));
      dff finalout[8];
    }
  }
  .clk(sclk.value ){
    .rst(rst){
      fsm nn1(#INIT(S0))={S0,S1,S2};
      multnn1 multiply;

    }
  }

  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    btn.in=io_button[0];
    btn_pressed_detector.in = btn.out;
    if (btn_pressed_dff.q == 0 && btn_pressed_detector.out == 1){
      btn_pressed_dff.d = 1;
    }
   
    // LEDs for debugging purpose. This is on the Au-board
    led[3]=btn.out;       // Led[3] for UP button to reset the FSM 
    led[0]=multiply.z;    // led[0] on Au showing z signal.
    // LEDs for debugging purpose. This is on the IO-shield
    io_led[0]=multiply.debug; //showing Register B 
    io_led[1]=multiply.debug1; //showing register A 
    io_led[2]=finalout.q; // final output is on the most left led set 
    // DIP switch [0] used to input number N.
    multiply.n=io_dip[0];
        
    // set default control signals
    multiply.asel=0;
    multiply.ale=0;
    multiply.bsel=0;
    multiply.ble=0;

    finalout.d=multiply.out; // by default register for led is connected to output of the multiply
  
    //State transition diagram begins here.
    case(nn1.q){
      nn1.S0:                // State S0, load register A and B 
        // clear dff 
        btn_pressed_dff.d = 0;
        
        nn1.d=nn1.S1;
        multiply.asel=1;
        multiply.ale=1;
        multiply.bsel=0;
        multiply.ble=1;
        led[7]=1;
      nn1.S1:                // State S1, multiply A with B, and store back to A. Reduce B by 1.
        if(multiply.z==1){   // if Z=1, it means B is zero, go to DONE state, or S2.
          nn1.d=nn1.S2;  
          finalout.d=finalout.q;
          }

        else                  // if not DONE, continue in this state.
          nn1.d=nn1.S1;
        led[6]=1;
        multiply.asel=0;
        multiply.ale=1;
        multiply.bsel=1;
        multiply.ble=1;
      nn1.S2:                // DONE state. 
        led[5]=1;
        nn1.d=nn1.S2;
        finalout.d=finalout.q;
        multiply.asel=0;
        multiply.ale=0;
        multiply.bsel=0;
        multiply.ble=0;
        if (btn_pressed_dff.q)    
        // if UP button on IO-shield is pressed, 
        // reset to S0. You can also simply check btn.out here since 
        // you will probably press the button long enough for this clause to detect it too
          nn1.d=nn1.S0;
    }
  }
}