/*
   This file was generated automatically by Alchitry Labs version 1.2.0.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module sequence_checker_1 (
    input [3:0] buttons,
    input clk,
    input rst,
    output reg [2:0] out_result,
    output reg [3:0] out_buttonseq
  );
  
  
  
  reg [3:0] M_sequence_d, M_sequence_q = 1'h0;
  
  reg [2:0] M_result_d, M_result_q = 1'h0;
  
  localparam MATCH = 4'hb;
  
  
  localparam WAITFIRSTPRESS_brain = 2'd0;
  localparam WAITSECONDPRESS_brain = 2'd1;
  localparam CHECKPRESS_brain = 2'd2;
  
  reg [1:0] M_brain_d, M_brain_q = WAITFIRSTPRESS_brain;
  
  always @* begin
    M_brain_d = M_brain_q;
    M_result_d = M_result_q;
    M_sequence_d = M_sequence_q;
    
    
    case (M_brain_q)
      WAITFIRSTPRESS_brain: begin
        if (buttons[3+0-:1] | buttons[2+0-:1] | buttons[1+0-:1] | buttons[0+0-:1]) begin
          if (buttons[3+0-:1]) begin
            M_sequence_d[0+1-:2] = 2'h3;
          end else begin
            if (buttons[2+0-:1]) begin
              M_sequence_d[0+1-:2] = 2'h2;
            end else begin
              if (buttons[1+0-:1]) begin
                M_sequence_d[0+1-:2] = 2'h1;
              end else begin
                if (buttons[0+0-:1]) begin
                  M_sequence_d[0+1-:2] = 2'h0;
                end
              end
            end
          end
          M_brain_d = WAITSECONDPRESS_brain;
          M_result_d = 3'h0;
        end else begin
          M_brain_d = WAITFIRSTPRESS_brain;
        end
      end
      WAITSECONDPRESS_brain: begin
        if (buttons[3+0-:1] | buttons[2+0-:1] | buttons[1+0-:1] | buttons[0+0-:1]) begin
          if (buttons[3+0-:1]) begin
            M_sequence_d[2+1-:2] = 2'h3;
          end else begin
            if (buttons[2+0-:1]) begin
              M_sequence_d[2+1-:2] = 2'h2;
            end else begin
              if (buttons[1+0-:1]) begin
                M_sequence_d[2+1-:2] = 2'h1;
              end else begin
                if (buttons[0+0-:1]) begin
                  M_sequence_d[2+1-:2] = 2'h0;
                end
              end
            end
          end
          M_brain_d = CHECKPRESS_brain;
        end else begin
          M_brain_d = WAITSECONDPRESS_brain;
        end
      end
      CHECKPRESS_brain: begin
        if (M_sequence_q[0+1-:2] == 2'h3 && M_sequence_q[2+1-:2] == 2'h2) begin
          M_result_d = 3'h7;
        end else begin
          M_result_d = 3'h4;
        end
        M_brain_d = CHECKPRESS_brain;
      end
    endcase
    out_result = M_result_q;
    out_buttonseq = M_sequence_q;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_sequence_q <= 1'h0;
    end else begin
      M_sequence_q <= M_sequence_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_brain_q <= 1'h0;
    end else begin
      M_brain_q <= M_brain_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_result_q <= 1'h0;
    end else begin
      M_result_q <= M_result_d;
    end
  end
  
endmodule
